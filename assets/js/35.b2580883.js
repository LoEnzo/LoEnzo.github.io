(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{553:function(t,e,r){"use strict";r.r(e);var s=r(4),o=Object(s.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("div",{staticClass:"custom-block tip"},[r("p",[r("code",[t._v("RestTemplate")]),t._v("是Spring的通过客户端访问RESTful服务端的核心类，和"),r("code",[t._v("JdbcTemplate")]),t._v("、"),r("code",[t._v("JmsTemplate")]),t._v("概念相似，都是Spring提供的模板类"),r("code",[t._v("RestTemplate")]),t._v("的行为可以通过callback回调方法和配置"),r("code",[t._v("HttpMessageConverter")]),t._v(" 来定制，用来把对象封装到HTTP请求体，将响应信息放到一个对象中，"),r("a",{attrs:{href:"https://www.jianshu.com/p/0fd5f3f64137",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考"),r("OutboundLink")],1)])]),t._v(" "),r("h2",{attrs:{id:"resttemplate"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#resttemplate"}},[t._v("#")]),t._v(" RestTemplate")]),t._v(" "),r("p",[r("code",[t._v("RestTemplate")]),t._v("是"),r("code",[t._v("Spring")]),t._v("提供的用于访问Rest服务的客户端，同步client端的核心类，简化了与http服务的通信，并满足"),r("code",[t._v("RestFul")]),t._v("原则"),r("code",[t._v("RestTemplate")]),t._v("提供了多种便捷访问远程Http服务的方法，相比之前使用"),r("code",[t._v("Apache")]),t._v("的"),r("code",[t._v("HttpClient")]),t._v("能更加有效的提高客户端的编写效率。")]),t._v(" "),r("h2",{attrs:{id:"resttemplate-method"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#resttemplate-method"}},[t._v("#")]),t._v(" RestTemplate method")]),t._v(" "),r("p",[t._v("RestTemplate提供的方法与RESTFul设计规范对比")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("Http method")]),t._v(" "),r("th",[t._v("对应操作")]),t._v(" "),r("th",[t._v("RestTemplate method")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[r("strong",[t._v("DELETE")])]),t._v(" "),r("td",[t._v("DELETE")]),t._v(" "),r("td",[r("strong",[t._v("delete")]),r("br"),t._v("void delete(URI url)"),r("br"),t._v("void delete(String url, Object... uriVariables) "),r("br"),t._v("void delete(String url, Map<String,?> uriVariables)")])]),t._v(" "),r("tr",[r("td",[r("strong",[t._v("GET")])]),t._v(" "),r("td",[t._v("SELECT")]),t._v(" "),r("td",[r("strong",[t._v("getForObject")]),r("br"),t._v("T   getForObject(String url, Class< T> responseType, Object... uriVariables)"),r("br"),t._v("T   getForObject(String url, Class< T> responseType, Map<String,?> uriVariables)"),r("br"),t._v("T   getForObject(URI url, Class< T> responseType)"),r("br")])]),t._v(" "),r("tr",[r("td"),t._v(" "),r("td"),t._v(" "),r("td",[r("strong",[t._v("getForEntity")]),r("br"),t._v("ResponseEntity< T>  getForEntity(URI url, Class< T> responseType)"),r("br"),t._v("ResponseEntity< T>  getForEntity(String url, Class< T> responseType, Object... uriVariables)"),r("br"),t._v("ResponseEntity< T>  getForEntity(String url, Class< T> responseType, Map<String,?> uriVariables)")])]),t._v(" "),r("tr",[r("td",[r("strong",[t._v("POST")])]),t._v(" "),r("td",[t._v("INSERT")]),t._v(" "),r("td",[r("strong",[t._v("postForObject")]),r("br"),t._v("T  postForObject(String url, Object request, Class< T> responseType, Object... uriVariables)"),r("br"),t._v("T  postForObject(String url, Object request, Class< T> responseType, Map<String,?> uriVariables)"),r("br"),t._v("T  postForObject(URI url, Object request, Class< T> responseType)")])]),t._v(" "),r("tr",[r("td"),t._v(" "),r("td"),t._v(" "),r("td",[r("strong",[t._v("postForEntity")]),r("br"),t._v("ResponseEntity< T>  postForEntity(String url, Object request, Class< T> responseType, Object... uriVariables)"),r("br"),t._v("ResponseEntity< T>  postForEntity(String url, Object request, Class< T> responseType, Map<String,?> uriVariables)"),r("br"),t._v("ResponseEntity< T>  postForEntity(URI url, Object request, Class< T> responseType)")])]),t._v(" "),r("tr",[r("td",[r("strong",[t._v("PUT")])]),t._v(" "),r("td",[t._v("UPDATE")]),t._v(" "),r("td",[r("strong",[t._v("put")]),r("br"),t._v("void   put(String url, Object request, Object... uriVariables)"),r("br"),t._v("void   put(String url, Object request, Map<String,?> uriVariables)"),r("br"),t._v("void   put(URI url, Object request)")])]),t._v(" "),r("tr",[r("td",[r("strong",[t._v("OPTIONS")])]),t._v(" "),r("td"),t._v(" "),r("td",[r("strong",[t._v("optionsForAllow")]),r("br"),t._v("Set< HttpMethod>  optionsForAllow(URI url)"),r("br"),t._v("Set< HttpMethod>  optionsForAllow(String url, Object... uriVariables)"),r("br"),t._v("Set< HttpMethod>  optionsForAllow(String url, Map<String,?> uriVariables)")])]),t._v(" "),r("tr",[r("td",[r("strong",[t._v("HEAD")])]),t._v(" "),r("td"),t._v(" "),r("td",[r("strong",[t._v("headForHeaders")]),r("br"),t._v("HttpHeaders   headForHeaders(URI url)"),r("br"),t._v("HttpHeaders   headForHeaders(String url, Object... uriVariables)"),r("br"),t._v("HttpHeaders   headForHeaders(String url, Map<String,?> uriVariables)")])]),t._v(" "),r("tr",[r("td",[r("strong",[t._v("any")])]),t._v(" "),r("td"),t._v(" "),r("td",[r("strong",[t._v("exchange")])])]),t._v(" "),r("tr",[r("td"),t._v(" "),r("td"),t._v(" "),r("td",[r("strong",[t._v("excute")])])])])]),t._v(" "),r("ul",[r("li",[t._v("RestTemplate的方法名遵循一定的命名规范，第一部分表示用哪种HTTP方法调用（get，post），第二部分表示返回类型")]),t._v(" "),r("li",[t._v("getForObject() -- 发送GET请求，将HTTP response转换成一个指定的object对象")]),t._v(" "),r("li",[t._v("postForEntity() -- 发送POST请求，将给定的对象封装到HTTP请求体，返回类型是一个HttpEntity对象")]),t._v(" "),r("li",[t._v("每个HTTP方法对应的RestTemplate方法都有3种。其中2种的url参数为字符串，URI参数变量分别是Object数组和Map，第3种使用URI类型作为参数")]),t._v(" "),r("li",[r("code",[t._v("exchange")]),t._v(" 和"),r("code",[t._v("execute")]),t._v(" 方法比上面列出的其它方法（如getForObject、postForEntity等）使用范围更广，允许调用者指定HTTP请求的方法（GET、POST、PUT等），并且可以支持像HTTP PATCH（部分更新），但需要底层的HTTP库支持，JDK自带的"),r("code",[t._v("HttpURLConnection")]),t._v("不支持PATCH方法，Apache的HTTPClient 4.2及以后版本支持")])])])}),[],!1,null,null,null);e.default=o.exports}}]);