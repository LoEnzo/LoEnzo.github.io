(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{648:function(t,r,s){t.exports=s.p+"assets/img/springcloud_arch.64f395de.png"},649:function(t,r,s){t.exports=s.p+"assets/img/springcloud_arch02.f175bdc2.png"},785:function(t,r,s){"use strict";s.r(r);var a=s(7),_=Object(a.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("mall项目全套学习，mall项目（39k+star）是一套电商系统，使用现阶段主流技术实现。涵盖了SpringBoot 2.3.0、MyBatis 3.4.6、Elasticsearch 7.6.2、RabbitMQ 3.7.15、Redis 5.0、MongoDB 4.2.5、Mysql5.7等技术，采用Docker容器化部署。")]),t._v(" "),a("p",[t._v("本文是我根据作者开源项目，文档依次学习做的缩略学习流程笔记和遇到的问题，工程同样用的作者的开源项目，实际学习中需要根据自己需求安装一些软件，修改一些配置，有些东西没有细写，完整的可以看作者链接。")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://www.macrozheng.com/#/",target:"_blank",rel:"noopener noreferrer"}},[t._v("doc文档地址"),a("OutboundLink")],1),t._v("，作者"),a("a",{attrs:{href:"https://github.com/macrozheng/mall-learning/blob/master/docs/cloud/springcloud.md#%E5%85%AC%E4%BC%97%E5%8F%B7",target:"_blank",rel:"noopener noreferrer"}},[t._v("公众号"),a("OutboundLink")],1),t._v("第一时间获取，根据文档持续学习")])]),t._v(" "),a("h1",{attrs:{id:"springcloud整体架构概览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springcloud整体架构概览"}},[t._v("#")]),t._v(" SpringCloud整体架构概览")]),t._v(" "),a("h2",{attrs:{id:"什么是springcloud"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是springcloud"}},[t._v("#")]),t._v(" 什么是SpringCloud")]),t._v(" "),a("h3",{attrs:{id:"目标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目标"}},[t._v("#")]),t._v(" 目标")]),t._v(" "),a("p",[t._v("协调任何服务，简化分布式系统开发。")]),t._v(" "),a("h3",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),a("p",[t._v("构建分布式系统不应该是复杂的，SpringCloud对常见的分布式系统模式提供了简单易用的编程模型，帮助开发者构建弹性、可靠、协调的应用程序。 SpringCloud是在SpringBoot的基础上构建的，使开发者可以轻松入门并快速提高工作效率。 SpringCloud为开发人员提供了快速构建分布式系统架构的工具，例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁定，领导选举，分布式会话，集群状态等。")]),t._v(" "),a("h2",{attrs:{id:"整体架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整体架构"}},[t._v("#")]),t._v(" 整体架构")]),t._v(" "),a("p",[a("img",{attrs:{src:s(648),alt:"来自Spring官网"}})]),t._v(" "),a("h2",{attrs:{id:"springcloud的版本关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springcloud的版本关系"}},[t._v("#")]),t._v(" SpringCloud的版本关系")]),t._v(" "),a("p",[t._v('SpringCloud是一个由许多子项目组成的综合项目，各子项目有不同的发布节奏。 为了管理SpringCloud与各子项目的版本依赖关系，发布了一个清单，其中包括了某个SpringCloud版本对应的子项目版本。 为了避免SpringCloud版本号与子项目版本号混淆，SpringCloud版本采用了名称而非版本号的命名，这些版本的名字采用了伦敦地铁站的名字，根据字母表的顺序来对应版本时间顺序，例如Angel是第一个版本, Brixton是第二个版本。 当SpringCloud的发布内容积累到临界点或者一个重大BUG被解决后，会发布一个"service releases"版本，简称SRX版本，比如Greenwich.SR2就是SpringCloud发布的Greenwich版本的第2个SRX版本。')]),t._v(" "),a("h3",{attrs:{id:"springcloud和springboot版本对应关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springcloud和springboot版本对应关系"}},[t._v("#")]),t._v(" SpringCloud和SpringBoot版本对应关系")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("SpringCloud Version")]),t._v(" "),a("th",[t._v("SpringBoot Version")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Hoxton")]),t._v(" "),a("td",[t._v("2.2.x")])]),t._v(" "),a("tr",[a("td",[t._v("Greenwich")]),t._v(" "),a("td",[t._v("2.1.x")])]),t._v(" "),a("tr",[a("td",[t._v("Finchley")]),t._v(" "),a("td",[t._v("2.0.x")])]),t._v(" "),a("tr",[a("td",[t._v("Edgware")]),t._v(" "),a("td",[t._v("1.5.x")])]),t._v(" "),a("tr",[a("td",[t._v("Dalston")]),t._v(" "),a("td",[t._v("1.5.x")])])])]),t._v(" "),a("h3",{attrs:{id:"springcloud和各子项目版本对应关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springcloud和各子项目版本对应关系"}},[t._v("#")]),t._v(" SpringCloud和各子项目版本对应关系")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Component")]),t._v(" "),a("th",[t._v("Edgware.SR6")]),t._v(" "),a("th",[t._v("Greenwich.SR2")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("spring-cloud-bus")]),t._v(" "),a("td",[t._v("1.3.4.RELEASE")]),t._v(" "),a("td",[t._v("2.1.2.RELEASE")])]),t._v(" "),a("tr",[a("td",[t._v("spring-cloud-commons")]),t._v(" "),a("td",[t._v("1.3.6.RELEASE")]),t._v(" "),a("td",[t._v("2.1.2.RELEASE")])]),t._v(" "),a("tr",[a("td",[t._v("spring-cloud-config")]),t._v(" "),a("td",[t._v("1.4.7.RELEASE")]),t._v(" "),a("td",[t._v("2.1.3.RELEASE")])]),t._v(" "),a("tr",[a("td",[t._v("spring-cloud-netflix")]),t._v(" "),a("td",[t._v("1.4.7.RELEASE")]),t._v(" "),a("td",[t._v("2.1.2.RELEASE")])]),t._v(" "),a("tr",[a("td",[t._v("spring-cloud-security")]),t._v(" "),a("td",[t._v("1.2.4.RELEASE")]),t._v(" "),a("td",[t._v("2.1.3.RELEASE")])]),t._v(" "),a("tr",[a("td",[t._v("spring-cloud-consul")]),t._v(" "),a("td",[t._v("1.3.6.RELEASE")]),t._v(" "),a("td",[t._v("2.1.2.RELEASE")])]),t._v(" "),a("tr",[a("td",[t._v("spring-cloud-sleuth")]),t._v(" "),a("td",[t._v("1.3.6.RELEASE")]),t._v(" "),a("td",[t._v("2.1.1.RELEASE")])]),t._v(" "),a("tr",[a("td",[t._v("spring-cloud-stream")]),t._v(" "),a("td",[t._v("Ditmars.SR5")]),t._v(" "),a("td",[t._v("Fishtown.SR3")])]),t._v(" "),a("tr",[a("td",[t._v("spring-cloud-zookeeper")]),t._v(" "),a("td",[t._v("1.2.3.RELEASE")]),t._v(" "),a("td",[t._v("2.1.2.RELEASE")])]),t._v(" "),a("tr",[a("td",[t._v("spring-boot")]),t._v(" "),a("td",[t._v("1.5.21.RELEASE")]),t._v(" "),a("td",[t._v("2.1.5.RELEASE")])]),t._v(" "),a("tr",[a("td",[t._v("spring-cloud-task")]),t._v(" "),a("td",[t._v("1.2.4.RELEASE")]),t._v(" "),a("td",[t._v("2.1.2.RELEASE")])]),t._v(" "),a("tr",[a("td",[t._v("spring-cloud-gateway")]),t._v(" "),a("td",[t._v("1.0.3.RELEASE")]),t._v(" "),a("td",[t._v("2.1.2.RELEASE")])]),t._v(" "),a("tr",[a("td",[t._v("spring-cloud-openfeign")]),t._v(" "),a("td",[t._v("暂无")]),t._v(" "),a("td",[t._v("2.1.2.RELEASE")])])])]),t._v(" "),a("p",[a("strong",[t._v("注意：Greenwich版本是基于SpringBoot 2.1.x版本构建的，不适用于1.5.x版本。随着2019年8月SpringBoot 1.5.x版本停止维护，Edgware版本也将停止维护。")])]),t._v(" "),a("h2",{attrs:{id:"springcloud子项目简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springcloud子项目简介"}},[t._v("#")]),t._v(" SpringCloud子项目简介")]),t._v(" "),a("p",[a("img",{attrs:{src:s(649),alt:"来自Spring官网"}})]),t._v(" "),a("h3",{attrs:{id:"spring-cloud-netflix"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-netflix"}},[t._v("#")]),t._v(" Spring Cloud Netflix")]),t._v(" "),a("p",[t._v("Netflix OSS 开源组件集成，包括Eureka、Hystrix、Ribbon、Feign、Zuul等核心组件。")]),t._v(" "),a("ul",[a("li",[t._v("Eureka：服务治理组件，包括服务端的注册中心和客户端的服务发现机制；")]),t._v(" "),a("li",[t._v("Ribbon：负载均衡的服务调用组件，具有多种负载均衡调用策略；")]),t._v(" "),a("li",[t._v("Hystrix：服务容错组件，实现了断路器模式，为依赖服务的出错和延迟提供了容错能力；")]),t._v(" "),a("li",[t._v("Feign：基于Ribbon和Hystrix的声明式服务调用组件；")]),t._v(" "),a("li",[t._v("Zuul：API网关组件，对请求提供路由及过滤功能。")])]),t._v(" "),a("h3",{attrs:{id:"spring-cloud-openfeign"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-openfeign"}},[t._v("#")]),t._v(" Spring Cloud OpenFeign")]),t._v(" "),a("p",[t._v("基于Ribbon和Hystrix的声明式服务调用组件，可以动态创建基于Spring MVC注解的接口实现用于服务调用，在SpringCloud 2.0中已经取代Feign成为了一等公民。")]),t._v(" "),a("h3",{attrs:{id:"spring-cloud-config"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-config"}},[t._v("#")]),t._v(" Spring Cloud Config")]),t._v(" "),a("p",[t._v("集中配置管理工具，分布式系统中统一的外部配置管理，默认使用Git来存储配置，可以支持客户端配置的刷新及加密、解密操作。")]),t._v(" "),a("h3",{attrs:{id:"spring-cloud-bus"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-bus"}},[t._v("#")]),t._v(" Spring Cloud Bus")]),t._v(" "),a("p",[t._v("用于传播集群状态变化的消息总线，使用轻量级消息代理链接分布式系统中的节点，可以用来动态刷新集群中的服务配置。")]),t._v(" "),a("h3",{attrs:{id:"spring-cloud-sleuth"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-sleuth"}},[t._v("#")]),t._v(" Spring Cloud Sleuth")]),t._v(" "),a("p",[t._v("SpringCloud应用程序的分布式请求链路跟踪，支持使用Zipkin、HTrace和基于日志（例如ELK）的跟踪。")]),t._v(" "),a("h3",{attrs:{id:"spring-cloud-consul"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-consul"}},[t._v("#")]),t._v(" Spring Cloud Consul")]),t._v(" "),a("p",[t._v("基于Hashicorp Consul的服务治理组件。")]),t._v(" "),a("h3",{attrs:{id:"spring-cloud-gateway"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-gateway"}},[t._v("#")]),t._v(" Spring Cloud Gateway")]),t._v(" "),a("p",[t._v("API网关组件，对请求提供路由及过滤功能。")]),t._v(" "),a("h3",{attrs:{id:"spring-cloud-admin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-admin"}},[t._v("#")]),t._v(" Spring Cloud Admin")]),t._v(" "),a("p",[t._v("微服务应用监控")]),t._v(" "),a("h3",{attrs:{id:"spring-cloud-security"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-security"}},[t._v("#")]),t._v(" Spring Cloud Security")]),t._v(" "),a("p",[t._v("安全工具包，对Zuul代理中的负载均衡OAuth2客户端及登录认证进行支持。")]),t._v(" "),a("h3",{attrs:{id:"spring-cloud-alibaba"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-alibaba"}},[t._v("#")]),t._v(" Spring Cloud Alibaba")]),t._v(" "),a("p",[t._v("Nacos 作为注册中心和配置中心使用")]),t._v(" "),a("h3",{attrs:{id:"spring-cloud-stream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-stream"}},[t._v("#")]),t._v(" Spring Cloud Stream")]),t._v(" "),a("p",[t._v("轻量级事件驱动微服务框架，可以使用简单的声明式模型来发送及接收消息，主要实现为Apache Kafka及RabbitMQ。")]),t._v(" "),a("h3",{attrs:{id:"spring-cloud-task"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-task"}},[t._v("#")]),t._v(" Spring Cloud Task")]),t._v(" "),a("p",[t._v("用于快速构建短暂、有限数据处理任务的微服务框架，用于向应用中添加功能性和非功能性的特性。")]),t._v(" "),a("h3",{attrs:{id:"spring-cloud-zookeeper"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-zookeeper"}},[t._v("#")]),t._v(" Spring Cloud Zookeeper")]),t._v(" "),a("p",[t._v("基于Apache Zookeeper的服务治理组件。")])])}),[],!1,null,null,null);r.default=_.exports}}]);